defmodule Memory do
  @moduledoc """
  The Memory application provides a persistance layer
  backed by Redis.

  The data stored may be forgotten at a later date.
  """

  alias Memory.{Pool, Lua}
  require Lua



  @doc """
  Create a new meter.

  """
  def create_meter(meter_key, total, progress)
    when is_binary(meter_key)
    and is_integer(total)
    and is_integer(progress)
    and total > progress
  do
    script = Lua.create_meter()
    command = ["EVAL", script, 3, meter_key, total, progress]
    case Pool.command(command) do
      {:ok, "ok"} ->
        :ok
      {:ok, "already exists"} ->
        :already_exists
    end
  end

  @doc """
  Delete a meter.

  """
  def delete_meter(meter_key) when is_binary(meter_key) do
    command = ["DEL",
               "meter_progress:::" <> meter_key,
               "meter_total:::" <> meter_key,
               "meter_request_history:::" <> meter_key]
    {:ok, _} = Pool.command(command)
    :ok
  end

  @doc """
  Increment a `meter` if (and only if) the given request id
  (a unique id generated by the client) does is not in the
  `meter_request_history` set (meaning it has already taken place).

  Returns an error if the request_id has already been used.

  Returns an error if the meter has not yet been created.

  """
  def increment_meter(request_id, meter_key, amount)
    when is_binary(request_id)
    and is_binary(meter_key)
    and is_integer(amount)
  do
    script = Lua.idempotent_increment()
    command = ["EVAL", script, 3, request_id, meter_key, amount]
    case Pool.command(command) do
      {:ok, "unknown meter"} ->
        :unknown_meter
    end
  end



  @doc false
  def get(key) when is_binary(key) do
    case Pool.command(["GET", key]) do
      {:ok, nil} -> nil
      {:ok, value} -> {:ok, value}
    end
  end

  @doc false
  def delete(key) when is_binary(key) do
    Pool.command(["DEL", key])
  end
end
