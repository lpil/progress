--
-- # idempotent_increment.lua
--
-- Increment a `meter` if (and only if) the given request id
-- (a unique id generated by the client) does is not in the
-- `meter_request_history` set (meaning it has already taken place).
--
-- Attempting to defend against the network delivering a request twice.
--
-- A Lua script so Redis can perform the action atomically.
-- There's still a possibility for race conditions during a Redis
-- failover, but the data handled by this application doesn't need
-- that level of durability.
--

-- Arguments

local request_id = KEYS[1]        -- a uuid
local meter_key = KEYS[2]         -- "my_meter01"
local increment_amount = KEYS[3]  -- 50

--

local set_name = "meter_request_history:::" .. meter_key
local meter_name = "meter:::" .. meter_key

local is_in_set = redis.call("SISMEMBER", set_name, request_id) == 1

if is_in_set then
  return false
else
  redis.call("SADD", set_name, request_id)
  redis.call("INCRBY", meter_name, increment_amount)
  return "OK"
end
